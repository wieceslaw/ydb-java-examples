/*
 * This file is generated by jOOQ.
 */
package ydb.default_schema.tables;


import java.time.LocalDate;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import tech.ydb.jooq.binding.DateBinding;

import ydb.default_schema.DefaultSchema;
import ydb.default_schema.Keys;
import ydb.default_schema.tables.records.EpisodesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Episodes extends TableImpl<EpisodesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DEFAULT_SCHEMA.episodes</code>
     */
    public static final Episodes EPISODES = new Episodes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EpisodesRecord> getRecordType() {
        return EpisodesRecord.class;
    }

    /**
     * The column <code>DEFAULT_SCHEMA.episodes.series_id</code>.
     */
    public final TableField<EpisodesRecord, Long> SERIES_ID = createField(DSL.name("series_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>DEFAULT_SCHEMA.episodes.season_id</code>.
     */
    public final TableField<EpisodesRecord, Long> SEASON_ID = createField(DSL.name("season_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>DEFAULT_SCHEMA.episodes.episode_id</code>.
     */
    public final TableField<EpisodesRecord, Long> EPISODE_ID = createField(DSL.name("episode_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>DEFAULT_SCHEMA.episodes.title</code>.
     */
    public final TableField<EpisodesRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(4194304), this, "");

    /**
     * The column <code>DEFAULT_SCHEMA.episodes.air_date</code>.
     */
    public final TableField<EpisodesRecord, LocalDate> AIR_DATE = createField(DSL.name("air_date"), SQLDataType.LOCALDATE, this, "", new DateBinding());

    private Episodes(Name alias, Table<EpisodesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Episodes(Name alias, Table<EpisodesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>DEFAULT_SCHEMA.episodes</code> table reference
     */
    public Episodes(String alias) {
        this(DSL.name(alias), EPISODES);
    }

    /**
     * Create an aliased <code>DEFAULT_SCHEMA.episodes</code> table reference
     */
    public Episodes(Name alias) {
        this(alias, EPISODES);
    }

    /**
     * Create a <code>DEFAULT_SCHEMA.episodes</code> table reference
     */
    public Episodes() {
        this(DSL.name("episodes"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<EpisodesRecord> getPrimaryKey() {
        return Keys.PK_EPISODES;
    }

    @Override
    public Episodes as(String alias) {
        return new Episodes(DSL.name(alias), this);
    }

    @Override
    public Episodes as(Name alias) {
        return new Episodes(alias, this);
    }

    @Override
    public Episodes as(Table<?> alias) {
        return new Episodes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Episodes rename(String name) {
        return new Episodes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Episodes rename(Name name) {
        return new Episodes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Episodes rename(Table<?> name) {
        return new Episodes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Episodes where(Condition condition) {
        return new Episodes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Episodes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Episodes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Episodes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Episodes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Episodes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Episodes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Episodes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Episodes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Episodes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
